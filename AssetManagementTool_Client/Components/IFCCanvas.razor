@inject IJSRuntime jsRuntime
@implements IDisposable;

<MudContainer Class="mx-2 my-2" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="8">
            <div id="divForCanvas" style="width:100%; height:500px"></div>
        </MudItem>
        <MudItem xs="4">
            <MudText Align="Align.Center" Typo="Typo.h6">Element Properties</MudText>
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Color="Color.Primary">
                @if (_selectionProperties is not null)
                {
                    @foreach (var propertySet in _selectionProperties)
                    {
                        <MudTabPanel Text=@propertySet.name Style="color: #424242ff">
                            <MudSimpleTable Dense="true" Striped="true" Hover="true" FixedHeader="true" Style="height:372px">
                                <thead>
                                    <tr>
                                        <th>Property</th>
                                        <th>Value</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var property in propertySet.properties)
                                    {
                                        <tr>
                                            <td>@property.name</td>
                                            <td>@property.value</td>
                                        </tr>
                                    }
                                </tbody>
                            </MudSimpleTable>
                        </MudTabPanel>
                    }
                }
                else
                {
                    <MudText Align="Align.Center">Nothing selected</MudText>
                }
            </MudTabs>
        </MudItem>

    </MudGrid>


    @if (_loadProgress < 100)
    {
        <MudText>Loading</MudText>
        <MudProgressLinear Color="Color.Primary" Value="@_loadProgress" Class="my-7" />
    }

</MudContainer>



    @code {

        [Parameter]
        public AssetDTO Asset { get; set; }
        [Parameter]
        public EventCallback<string> SetSelectedItem { get; set; }
        public int _loadProgress { get; set; } = 0;
        private PropertySetDTO[] _selectionProperties { get; set; }
        public string selectedID { get; set; }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {

            if (!firstRender) return;

            //Initialize ThreeJs canvas and pass reference to blazor component
            var dotNetReference = DotNetObjectReference.Create(this);
            await jsRuntime.InvokeVoidAsync("SceneInitIFC", new object[] { dotNetReference, Asset.IFCBlobLink });
        }

        [JSInvokable("UpdateSelection")]
        public void UpdateSelectionFromCanvas(PropertySetDTO[] propertySets)
        {
            _selectionProperties = propertySets;
            try
            {
                selectedID = propertySets.FirstOrDefault(ps => ps.name == "IFC Properties").properties.FirstOrDefault(p => p.name == "Global Id").value;
            }
            catch
            {
                selectedID = "";
            }
            SetSelectedItem.InvokeAsync(selectedID);
            StateHasChanged();
        }

        [JSInvokable("CleanSelection")]
        public void CleanSelectionFromCanvas()
        {
            _selectionProperties = null;
            selectedID = "";
            SetSelectedItem.InvokeAsync(selectedID);
            StateHasChanged();
        }
        [JSInvokable("SetLoadProgress")]
        public void SetLoadProgress(double progress)
        {
            _loadProgress = (int)progress;
            StateHasChanged();
        }

        public async void Dispose()
        {
            await jsRuntime.InvokeVoidAsync("DisposeThree");
        }


    }



